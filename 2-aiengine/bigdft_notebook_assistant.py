# bigdft_notebook_assistant.py

"""
gemini_generated

### Points Forts (Ce qui est bien con√ßu)

1.  **Point d'Entr√©e Unique (`process_message`)** : C'est le plus grand gain architectural. Toute interaction passe par cette fonction, qui agit comme un contr√¥leur d'√©tat (state machine). C'est robuste, pr√©dictible et facile √† d√©boguer.
2.  **S√©paration Claire des R√¥les** : Vous avez maintenant une distinction parfaite :
    *   **Orchestrateur** (`_generate_and_store_code_for_current_step`) : Il g√®re la logique du plan (quelle √©tape, quels param√®tres).
    *   **G√©n√©rateur** (`_generate_bigdft_code`) : Sa seule t√¢che est de prendre un √©tat de session et de le traduire en code via l'agent RAG.
    Cette s√©paration est la cl√© d'un code maintenable.
3.  **G√©n√©ration de Code Intelligente et "Grounded"** : Toute la g√©n√©ration de code passe maintenant par `_generate_bigdft_code`, qui utilise syst√©matiquement l'agent RAG. Il ne peut plus "halluciner" du code, car il est forc√© de se baser sur les donn√©es que vous lui fournissez (le JSON de la mol√©cule) et sur la connaissance extraite de vos notebooks.
4.  **Flux Conversationnel Guid√© par un Plan** : L'assistant ne r√©agit plus simplement. Il **planifie** (`_generate_scientific_plan`), **propose** ce plan √† l'utilisateur pour validation, puis l'**ex√©cute** m√©thodiquement. C'est le comportement d'un assistant v√©ritablement intelligent.
5.  **Utilisation Robuste de Pydantic** : L'ensemble du processus est s√©curis√© par des mod√®les Pydantic (`ScientificPlan`, `BigDFTMoleculeProposal`, etc.). Cela garantit que les √©changes avec le LLM sont structur√©s et valides, ce qui r√©duit consid√©rablement les erreurs.

### Pistes d'Am√©lioration (Pour aller plus loin)

Le code est d√©j√† tr√®s bon, mais voici des id√©es pour une future V2 :

1.  **Enrichir la Planification** : Actuellement, `_generate_and_store_code_for_current_step` configure les param√®tres de calcul (`optimize_geometry`, etc.), mais utilise une fonctionnelle et une base par d√©faut (`PBE`/`SZ`). Vous pourriez rendre le planificateur (`_generate_scientific_plan`) encore plus intelligent en lui demandant de **d√©terminer aussi la fonctionnelle et la base appropri√©es** pour chaque √©tape. L'orchestrateur n'aurait alors qu'√† lire ces informations du plan.
2.  **Gestion des √âchecs de l'Agent** : Dans `_generate_bigdft_code`, si l'agent √©choue, vous retournez `None`. C'est bien, mais vous pourriez imaginer une boucle de "r√©paration" : si l'agent √©choue une premi√®re fois, vous pourriez tenter de lui renvoyer le prompt en lui disant "Ta tentative pr√©c√©dente a √©chou√©, voici l'erreur. R√©essaye en √©tant plus simple."
3.  **Validation du Code Assembl√©** : Dans `_assemble_final_script_with_llm`, vous demandez √† l'agent d'assembler les fragments. Une √©tape suppl√©mentaire pourrait √™tre de prendre le script final et de demander √† l'agent dans un nouvel appel : "Ce script Python est-il syntaxiquement correct et complet ? Y a-t-il des imports manquants ?". Cela ajouterait une couche de validation.

En conclusion de ce check-up : **le code est excellent**. Il est pass√© d'un script complexe avec des logiques parall√®les √† une architecture claire, robuste et pilot√©e par un agent intelligent.

---

## üìù Workflow de l'Assistant (Markdown)

Voici le d√©roulement complet d'une interaction typique avec l'assistant, de la demande initiale √† la g√©n√©ration du script final.

### ‚û°Ô∏è √âtape 1 : La Planification (Le Cerveau de l'Assistant)

1.  **L'Utilisateur Lance la Discussion** : L'utilisateur tape une commande comme `/discuss Calcule l'√©nergie d'atomisation de la mol√©cule HCN`.
2.  **Appel du Contr√¥leur** : `process_message` est appel√©. Il constate que la session est nouvelle (`self.session.active_plan is None`).
3.  **G√©n√©ration du Plan** : Il appelle `_generate_scientific_plan(user_message)`.
    *   Cette fonction envoie la demande de l'utilisateur √† l'agent LLM.
    *   Elle lui demande de la d√©composer en √©tapes logiques et de retourner un objet `ScientificPlan` structur√© (avec les √©tapes de calcul et l'analyse finale).
4.  **Proposition √† l'Utilisateur** : L'assistant stocke le plan dans la session, puis appelle `_display_plan_for_confirmation(plan)` pour afficher le plan d'action de mani√®re lisible dans le notebook.
5.  **Mise en Attente** : Le statut de la session passe √† `AWAIT_PLAN_CONFIRMATION`. L'assistant attend la r√©ponse de l'utilisateur.

### ‚û°Ô∏è √âtape 2 : La Boucle d'Ex√©cution (√âtape par √âtape)

C'est une boucle qui se r√©p√®te pour chaque `CalculationStep` du plan.

1.  **Confirmation du Plan par l'Utilisateur** : L'utilisateur tape `ok`.
2.  **Pr√©paration de la Visualisation** : `process_message` voit l'√©tat `AWAIT_PLAN_CONFIRMATION` et appelle `_prepare_and_visualize_current_step()`.
3.  **Proposition de la Mol√©cule** :
    *   `_prepare_and_visualize_current_step` regarde la premi√®re √©tape du plan (ex: "calcul sur HCN").
    *   Il appelle `_propose_molecule_with_llm` avec la description "la mol√©cule HCN".
    *   `_propose_molecule_with_llm` utilise le **RAG** pour chercher des informations sur la g√©om√©trie du HCN, puis demande au LLM de g√©n√©rer un objet `BigDFTMoleculeProposal` (avec les coordonn√©es, la charge, etc.).
4.  **Affichage et Mise en Attente** : La structure 3D est affich√©e dans le notebook. Le statut de la session passe √† `AWAIT_VISUALIZATION_CONFIRMATION`.

### ‚û°Ô∏è √âtape 3 : La G√©n√©ration de Code (La Magie du RAG)

1.  **Confirmation de la Mol√©cule par l'Utilisateur** : L'utilisateur inspecte la mol√©cule et tape `ok`.
2.  **Appel de l'Orchestrateur** : `process_message` voit l'√©tat `AWAIT_VISUALIZATION_CONFIRMATION` et appelle `_generate_and_store_code_for_current_step()`.
3.  **Configuration de la Session** : L'orchestrateur lit les param√®tres de l'√©tape actuelle (ex: `optimize_geometry=True`) et met √† jour l'objet `self.session.calculation_config`.
4.  **Appel du G√©n√©rateur de Code** : L'orchestrateur appelle `_generate_bigdft_code()`.
5.  **Mission pour l'Agent RAG** :
    *   `_generate_bigdft_code` pr√©pare une mission d√©taill√©e pour l'agent RAG.
    *   Il inclut les **donn√©es brutes** de la g√©om√©trie (le JSON que nous avons con√ßu).
    *   Il inclut les **instructions de calcul** en langage naturel (ex: "Une optimisation de la g√©om√©trie DOIT √™tre effectu√©e").
6.  **L'Agent Travaille** : L'agent RAG (`agent.run()`) re√ßoit la mission. Il utilise ses outils (`semantic_search`, etc.) pour trouver la syntaxe PyBigDFT correcte pour la g√©om√©trie ET pour les param√®tres de calcul. Il retourne le code final dans un `CodeExample`.
7.  **Stockage et Affichage** : Le code g√©n√©r√© est stock√© dans `self.session.generated_codes` et affich√© √† l'utilisateur.
8.  **On Recommence !** : L'index de l'√©tape est incr√©ment√©, et l'orchestrateur rappelle `_prepare_and_visualize_current_step()` pour passer √† l'√©tape suivante (ex: "atome de H isol√©"). La boucle retourne √† l'**√âtape 2, point 3**.

### ‚û°Ô∏è √âtape 4 : L'Assemblage Final (La Ligne d'Arriv√©e)

1.  **Fin de la Boucle** : Lorsque `_prepare_and_visualize_current_step` est appel√© et qu'il n'y a plus d'√©tapes de calcul (`step_index >= len(...)`), il appelle `_assemble_final_script_with_llm()`.
2.  **Mission d'Assemblage** : Cette fonction rassemble tous les fragments de code stock√©s dans `self.session.generated_codes`. Elle donne une mission tr√®s stricte au LLM : "Assemble ces fragments en une seule fonction HPC, avec des fonctions imbriqu√©es, et ajoute la logique pour l'analyse finale."
3.  **G√©n√©ration du Script Final** : Le LLM retourne le script complet et ex√©cutable dans un objet `FinalWorkflowScript`.
4.  **Affichage et R√©initialisation** : Le script final est affich√© √† l'utilisateur, pr√™t √† √™tre envoy√© au HPC via la commande `/execute`. La session est ensuite r√©initialis√©e avec `start_discussion()`, pr√™te pour une nouvelle t√¢che.


"""
import json
import logging
from typing import Dict, List, Any, Optional, Callable
from enum import Enum
from dataclasses import dataclass
from pathlib import Path

import numpy as np
from IPython.display import display, HTML, Markdown
from pydantic import BaseModel, Field

# Pour la visualisation 3D
try:
    import nglview as nv

    HAS_NGLVIEW = True
except ImportError:
    HAS_NGLVIEW = False

try:
    import py3Dmol

    HAS_PY3DMOL = True
except ImportError:
    HAS_PY3DMOL = False


class CalculationParameters(BaseModel):
    """Param√®tres sp√©cifiques pour un calcul DFT."""
    optimize_geometry: bool = Field(False, description="Indique s'il faut effectuer une optimisation de la g√©om√©trie.")
    spin_polarized: bool = Field(False, description="Indique si le calcul doit √™tre polaris√© en spin (pour les atomes isol√©s ou les syst√®mes √† √©lectrons non appari√©s).")
    # On pourra ajouter plus de param√®tres ici plus tard (fonctionnelle, base, etc.)


class ToolArguments(BaseModel):
    """Arguments structur√©s pour l'outil 'run_dft_calculation'."""
    system_description: str = Field(..., description="Description textuelle claire du syst√®me chimique, ex: 'la mol√©cule HCN' ou 'un atome d'hydrog√®ne isol√©'.")
    calculation_params: CalculationParameters = Field(..., description="Les param√®tres sp√©cifiques du calcul DFT √† effectuer.")


class GeneratedCodeFragment(BaseModel):
    """Repr√©sente un bloc de code Python g√©n√©r√© par le LLM pour une seule √©tape."""
    function_code: str = Field(..., description="Le code Python complet et autonome pour une fonction de calcul (incluant les imports si n√©cessaire dans la fonction).")


class FinalWorkflowScript(BaseModel):
    """Le script Python final et complet g√©n√©r√© par l'assistant."""
    summary: str = Field(..., description="Un r√©sum√© en une phrase de ce que fait le script.")
    final_code: str = Field(..., description="Le code Python complet et ex√©cutable du workflow.")


class CalculationStep(BaseModel):
    """Repr√©sente une √©tape de calcul unitaire dans un plan scientifique."""
    step_id: int = Field(..., description="L'identifiant de l'√©tape, ex: 1")
    description: str = Field(...,
                             description="Description de l'√©tape pour l'utilisateur")
    tool_name: str = Field(..., description="L'outil √† appeler, ex: 'run_dft_calculation'.")
    tool_args: ToolArguments = Field(..., description="Les arguments structur√©s pour l'outil.")


class FinalAnalysisStep(BaseModel):
    """Repr√©sente l'√©tape finale d'analyse math√©matique."""
    description: str = Field(..., description="Description de l'analyse finale.")
    formula: str = Field(...,
                         description="La formule math√©matique √† appliquer si necessaire, sinon rien")


class ScientificPlan(BaseModel):
    """Un plan d'action complet pour atteindre un objectif scientifique."""
    overall_goal: str = Field(..., description="Le but g√©n√©ral de l'utilisateur.")
    calculation_steps: List[CalculationStep] = Field(..., description="La s√©quence des calculs √† effectuer.")
    final_analysis: Optional[FinalAnalysisStep] = Field(None,
                                                        description="L'analyse finale pour combiner les r√©sultats.")


class AtomDefinition(BaseModel):
    """D√©finition d'un atome avec position."""
    element: str = Field(..., description="Symbole chimique (ex: H, C, N, O)")
    position: List[float] = Field(..., description="Coordonn√©es [x, y, z] en Angstr√∂m")


class BigDFTMoleculeProposal(BaseModel):
    """Proposition de structure mol√©culaire par le LLM."""
    name: str = Field(..., description="Nom de la mol√©cule (ex: HCN, H2O)")
    atoms: List[AtomDefinition] = Field(..., description="Liste des atomes avec positions")
    charge: int = Field(0, description="Charge totale du syst√®me")
    multiplicity: int = Field(1, description="Multiplicit√© de spin")
    confidence: float = Field(..., description="Niveau de confiance de la proposition (0.0-1.0)")
    explanation: str = Field(..., description="Explication de la structure propos√©e")
    geometry_type: str = Field("unknown", description="Type de g√©om√©trie (linear, bent, tetrahedral, etc.)")


class BigDFTVisualizationCode(BaseModel):
    """Code de visualisation 3D g√©n√©r√©."""
    language: str = Field("python", description="Langage du code")
    code: str = Field(..., description="Code complet pour visualiser la mol√©cule")
    explanation: str = Field(..., description="Explication du code de visualisation")
    modifiable: bool = Field(True, description="Si le code peut √™tre modifi√© par l'utilisateur")
    dependencies: List[str] = Field(default_factory=list, description="D√©pendances requises")


class BigDFTStructuredResponse(BaseModel):
    """R√©ponse structur√©e compl√®te pour BigDFT."""
    executive_summary: str = Field(..., description="R√©sum√© de l'action effectu√©e")
    molecule_proposal: Optional[BigDFTMoleculeProposal] = Field(None, description="Structure mol√©culaire propos√©e")
    visualization_code: Optional[BigDFTVisualizationCode] = Field(None, description="Code de visualisation")
    next_instructions: str = Field(..., description="Instructions pour l'utilisateur")
    stage_reached: str = Field(..., description="√âtape atteinte dans le workflow")


class BigDFTStage(Enum):
    """√âtapes de construction d'une simulation BigDFT."""
    WELCOME = "welcome"
    DEFINE_SYSTEM = "define_system"
    STRUCTURE_CREATED = "structure_created"
    DEFINE_CALCULATION = "define_calculation"
    CALCULATION_SETUP = "calculation_setup"
    READY_TO_RUN = "ready_to_run"
    COMPLETED = "completed"
    AWAIT_PLAN_CONFIRMATION = "await_plan_confirmation"
    EXECUTING_PLAN = "executing_plan"
    AWAIT_VISUALIZATION_CONFIRMATION = "await_visualization_confirmation"


@dataclass
class MolecularSystem:
    """Repr√©sentation Python native d'un syst√®me mol√©culaire (sans BigDFT)."""
    name: str
    atoms: List[Dict[str, Any]]  # [{"element": "O", "position": [0,0,0]}, ...]
    charge: int = 0
    multiplicity: int = 1
    cell_parameters: Optional[Dict[str, float]] = None
    is_periodic: bool = False


@dataclass
class BigDFTCalculationConfig:
    """Configuration de calcul BigDFT (sans imports BigDFT)."""
    functional: str = "PBE"
    basis_set: str = "SZ"
    convergence_criterion: float = 1e-6
    max_iterations: int = 50
    calculate_forces: bool = True
    optimize_geometry: bool = False
    spin_polarized: bool = False


@dataclass
class BigDFTSession:
    """√âtat de la session BigDFT."""
    stage: BigDFTStage = BigDFTStage.WELCOME
    system: Optional[MolecularSystem] = None  # BigDFT System
    calculation_config: Optional[BigDFTCalculationConfig] = None
    conversation: List[Dict[str, str]] = None
    active_plan: Optional[ScientificPlan] = None
    current_step_index: int = 0
    step_results: Dict[int, Any] = None  # Pour stocker les r√©sultats de chaque √©tape
    # Un dictionnaire pour stocker les codes g√©n√©r√©s [step_id -> code_string]
    generated_codes: Dict[int, str] = None
    step_clarification_history: List[Dict[str, str]] = None

    def __post_init__(self):
        if self.conversation is None:
            self.conversation = []


class BigDFTVisualization(BaseModel):
    """Configuration pour la visualisation 3D."""
    structure_data: str = Field(..., description="Donn√©es de structure (XYZ format ou autre)")
    view_type: str = Field("ball_stick", description="Type de visualisation: ball_stick, spacefill, cartoon")
    show_bonds: bool = Field(True, description="Afficher les liaisons")
    background_color: str = Field("white", description="Couleur de fond")
    width: int = Field(600, description="Largeur de la visualisation")
    height: int = Field(400, description="Hauteur de la visualisation")


class BigDFTSystemDefinition(BaseModel):
    """D√©finition d'un syst√®me mol√©culaire pour BigDFT."""
    molecule_name: str = Field(..., description="Nom de la mol√©cule (ex: H2O, N2, etc.)")
    atoms: List[Dict[str, Any]] = Field(default_factory=list, description="Liste des atomes avec positions")
    cell_parameters: Optional[Dict[str, float]] = Field(None, description="Param√®tres de maille si p√©riodique")
    charge: int = Field(0, description="Charge totale du syst√®me")
    multiplicity: int = Field(1, description="Multiplicit√© de spin")


class BigDFTCalculationSetup(BaseModel):
    """Configuration du calcul BigDFT."""
    dft_functional: str = Field("PBE", description="Fonctionnelle DFT √† utiliser")
    basis_set: str = Field("SZ", description="Base atomique (SZ, DZ, TZ)")
    convergence_criterion: float = Field(1e-6, description="Crit√®re de convergence")
    max_iterations: int = Field(50, description="Nombre max d'it√©rations SCF")
    calculate_forces: bool = Field(True, description="Calculer les forces")
    optimization: bool = Field(False, description="Effectuer une optimisation de g√©om√©trie")


class BigDFTNotebookAssistant:
    """Assistant BigDFT pour notebook avec acc√®s au RAG."""

    def __init__(self, rag_system=None):
        self.rag = rag_system
        self.session = BigDFTSession()
        self.logger = logging.getLogger(__name__)

    async def start_discussion(self) -> Dict[str, Any]:
        """D√©marre une nouvelle discussion BigDFT."""
        self.session = BigDFTSession()  # Reset

        welcome_msg = """
# üöÄ Assistant BigDFT - Simulation DFT Interactive

Bienvenue ! Je vais vous aider √† construire votre simulation BigDFT √©tape par √©tape.

## Que pouvons-nous faire ensemble ?

1. **D√©finir votre syst√®me** : Mol√©cules, cristaux, surfaces
2. **Configurer le calcul** : Fonctionnelle, base, param√®tres
3. **Visualiser en 3D** : Structure interactive dans le notebook  
4. **Pr√©parer l'ex√©cution** : Code Python pr√™t pour le HPC
5. **Consulter la documentation** : Acc√®s au RAG BigDFT

## Pour commencer
D√©crivez-moi votre syst√®me mol√©culaire. Par exemple :
- "Je veux calculer l'√©nergie de la mol√©cule H2O"
- "J'ai besoin d'optimiser la g√©om√©trie de N2" 
- "Je veux √©tudier une surface de graph√®ne"
        """

        self.session.conversation.append({
            "role": "assistant",
            "content": welcome_msg
        })

        return {
            "status": "started",
            "stage": self.session.stage.value,
            "message": welcome_msg
        }

    async def process_message(self, user_message: str) -> Dict[str, Any]:
        """
        Traite un message utilisateur.
        - Si aucun plan n'est actif, en g√©n√®re un.
        - Si un plan attend confirmation, g√®re la r√©ponse.
        - Si un plan est en cours, traite la commande (ex: 'ok' pour continuer).
        """

        # Cas 1 : Il n'y a pas de plan actif. C'est le d√©but de la conversation.
        if self.session.active_plan is None:
            # On ignore les messages simples comme "ok" au d√©but.
            if user_message.lower().strip() in ['ok', 'oui', 'yes']:
                return {
                    "status": "info",
                    "message": "Veuillez d'abord d√©crire votre objectif scientifique, par exemple : 'Calcule l'√©nergie d'atomisation de H2O'."
                }

            print("üß† Aucun plan actif. G√©n√©ration d'un nouveau plan...")
            plan = await self._generate_scientific_plan(user_message)

            if not plan:
                return {"status": "error",
                        "message": "D√©sol√©, je n'ai pas pu √©laborer de plan pour votre requ√™te. Pouvez-vous reformuler ?"}

            # Stocker le plan dans la session et initialiser les r√©sultats
            self.session.active_plan = plan
            self.session.step_results = {}
            self.session.current_step_index = 0
            self.session.stage = BigDFTStage.AWAIT_PLAN_CONFIRMATION  # Un nouvel √©tat !
            self.session.generated_codes = {}
            # Pr√©senter le plan √† l'utilisateur pour qu'il le valide
            return await self._display_plan_for_confirmation(plan)

        user_response = user_message.lower().strip()

        # CAS 2 : L'utilisateur confirme le PLAN -> On montre la 1√®re mol√©cule
        if self.session.stage == BigDFTStage.AWAIT_PLAN_CONFIRMATION and user_response in ['ok', 'oui']:
            print("üëç Plan confirm√©. Pr√©paration de la premi√®re √©tape pour visualisation.")
            self.session.step_clarification_history = None  # On vide l'historique avant de commencer
            return await self._prepare_and_visualize_current_step()

        # CAS 3 : L'utilisateur confirme une MOL√âCULE -> On g√©n√®re et stocke le code avec l'agent RAG
        elif self.session.stage == BigDFTStage.AWAIT_VISUALIZATION_CONFIRMATION and user_response in ['ok', 'oui']:
            # SOUS-CAS 3.1 : L'utilisateur VALIDE la mol√©cule
            if user_response in ['ok', 'oui']:
                print(f"üî¨ Mol√©cule confirm√©e. G√©n√©ration du code...")
                self.session.step_clarification_history = None  # On vide l'historique avant de passer √† la suite
                return await self._generate_and_store_code_for_current_step()

            # SOUS-CAS 3.2 : L'utilisateur CORRIGE la proposition
            else:
                print(f"‚úèÔ∏è Correction re√ßue : '{user_message}'. Nouvelle tentative de g√©n√©ration de la mol√©cule...")
                # On ajoute la correction de l'utilisateur √† l'historique de l'√©tape
                if self.session.step_clarification_history:
                    self.session.step_clarification_history.append({"role": "user", "content": user_message})
                # On relance la visualisation, qui utilisera maintenant l'historique enrichi
                return await self._prepare_and_visualize_current_step()

        # G√©rer les annulations ou les messages non compris
        elif user_response in ['annuler', 'non', 'stop']:
            await self.start_discussion()
            return {"status": "plan_cancelled", "message": "Plan annul√©."}
        else:
            return {"status": "info", "message": "En attente de votre confirmation ('ok') pour continuer."}

    async def _generate_and_store_code_for_current_step(self) -> Dict[str, Any]:
        """
        ORCHESTRATEUR : Configure la session pour l'√©tape actuelle, appelle le
        g√©n√©rateur de code, puis g√®re le r√©sultat pour faire avancer le plan.
        """
        plan = self.session.active_plan
        step = plan.calculation_steps[self.session.current_step_index]

        # 1. Configurer la session pour l'√©tape en cours
        params = step.tool_args.calculation_params
        # On met √† jour la configuration globale de la session
        self.session.calculation_config = BigDFTCalculationConfig(
            optimize_geometry=params.optimize_geometry,
            spin_polarized=params.spin_polarized
            # NOTE : Si le plan sp√©cifiait la fonctionnelle, on l'ajouterait ici.
            # Pour l'instant, on garde PBE/SZ par d√©faut.
        )

        # 2. Appeler le g√©n√©rateur de code centralis√©
        bigdft_code = await self._generate_bigdft_code()

        # 3. G√©rer le r√©sultat
        if not bigdft_code:
            return {"status": "error", "message": "L'agent RAG n'a pas pu g√©n√©rer le code pour cette √©tape."}

        # 4. Afficher et stocker le code
        display(Markdown(f"#### ‚úÖ Code pour l'√âtape {step.step_id} G√©n√©r√©"))
        display(Markdown(f"```python\n{bigdft_code}\n```"))
        self.session.generated_codes[step.step_id] = bigdft_code

        # 5. Passer √† l'√©tape suivante du plan
        self.session.current_step_index += 1
        return await self._prepare_and_visualize_current_step()

    async def _assemble_final_script_with_llm(self) -> Dict[str, Any]:
        """
        Prend tous les fragments de code, et demande au LLM de les assembler
        en UNE SEULE fonction autonome contenant des fonctions imbriqu√©es.
        """
        plan = self.session.active_plan
        context = f"Objectif final : {plan.overall_goal}\nFormule d'analyse : {plan.final_analysis.formula}\n"
        for step_id, code in self.session.generated_codes.items():
            context += f"\n--- CODE POUR √âTAPE {step_id} ---\n{code}\n"

        # --- PROMPT FINAL CORRIG√â ET STRICT ---
        system_prompt = f"""
    Tu es un assembleur de code expert, sp√©cialis√© dans la pr√©paration de scripts pour l'ex√©cution sur des clusters HPC.
    Ta mission est de prendre plusieurs fragments de code Python et de les combiner en UNE SEULE fonction autonome et ex√©cutable.

    R√àGLES STRICTES D'ASSEMBLAGE :
    1.  **Fonction Unique :** Le r√©sultat final doit √™tre une seule et unique fonction, nomm√©e `run_complete_hpc_workflow()`. Le code ne doit rien contenir en dehors de cette fonction.
    2.  **Imports √† l'Int√©rieur :** TOUS les `import` n√©cessaires (ex: `from BigDFT...`) doivent √™tre plac√©s au d√©but, √Ä L'INT√âRIEUR de la fonction `run_complete_hpc_workflow()`. Regroupe-les pour √©viter les doublons.
    3.  **Fonctions Imbriqu√©es (Nested Functions) :** Chaque fragment de code fourni doit √™tre d√©fini comme une fonction imbriqu√©e (une fonction √† l'int√©rieur d'une autre) √Ä L'INT√âRIEUR de `run_complete_hpc_workflow()`.
    4.  **Orchestration :** Le corps principal de `run_complete_hpc_workflow()`, apr√®s les d√©finitions des imports et des fonctions imbriqu√©es, doit :
        a. Appeler chaque fonction d'√©tape dans l'ordre.
        b. Stocker les √©nergies retourn√©es dans des variables.
        c. Utiliser ces variables pour calculer et imprimer le r√©sultat de l'analyse finale.
        d. Retourner le r√©sultat final.

    CONTEXTE FOURNI :
    {context}

    Maintenant, g√©n√®re le script final en respectant scrupuleusement ces r√®gles. Le r√©sultat doit √™tre uniquement le code de la fonction `run_complete_hpc_workflow()`.
    """

        try:
            # L'appel au LLM avec le mod√®le Pydantic reste le m√™me, il est robuste.
            response = await self.rag.unified_agent.llm.generate_response(
                messages=[{"role": "system", "content": system_prompt}],
                pydantic_model=FinalWorkflowScript
            )
            final_script = FinalWorkflowScript.model_validate(response)

            # R√©initialiser pour la prochaine discussion
            await self.start_discussion()

            return {
                "status": "code_ready",
                "message": f"Workflow assembl√© ! {final_script.summary}",
                "code": final_script.final_code,
                "config_summary": {}
            }
        except Exception as e:
            return {"status": "error", "message": f"Erreur lors de l'assemblage final structur√© : {e}"}

    async def _display_plan_for_confirmation(self, plan: 'ScientificPlan') -> Dict[str, Any]:
        """Affiche le plan g√©n√©r√© par le LLM pour validation par l'utilisateur."""

        # Construire le message Markdown
        md = f"""### üìù Proposition de Plan d'Action

    J'ai analys√© votre objectif : **"{plan.overall_goal}"**.
    Voici le plan que je propose pour y parvenir. Veuillez le v√©rifier avant de continuer.

    ---
    """

        # Afficher les √©tapes de calcul
        md += "\n#### ‚öôÔ∏è **√âtapes de Calcul**\n"
        if plan.calculation_steps:
            for i, step in enumerate(plan.calculation_steps):
                # ‚úÖ CORRECTION : Ajout du retour √† la ligne
                md += f"**{i + 1}. {step.description}**\n"

                # Acc√©der √† 'calculation_params' comme un attribut d'objet
                params = step.tool_args.calculation_params

                details = []
                if params.optimize_geometry:
                    details.append("Optimisation de g√©om√©trie")
                if params.spin_polarized:
                    details.append("Spin polaris√©")

                if details:
                    # ‚úÖ CORRECTION : Ajout du retour √† la ligne
                    md += f"   - *D√©tails : {', '.join(details)}*\n"
        else:
            md += "- Aucune √©tape de calcul n√©cessaire.\n"

        # Afficher l'√©tape d'analyse finale (inchang√©)
        if plan.final_analysis:
            md += "\n#### üìä **√âtape d'Analyse Finale**\n"
            md += f"**{len(plan.calculation_steps) + 1}. {plan.final_analysis.description}**\n"

            readable_formula = plan.final_analysis.formula
            for i, step in enumerate(plan.calculation_steps):
                readable_formula = readable_formula.replace(f"result_{step.step_id}", f"R√©sultat(√âtape {step.step_id})")

            md += f"   - *Formule : `{readable_formula}`*\n"

        md += """
    ---
    ### ‚úÖ **Pr√™t √† continuer ?**

    - Tapez `ok` ou `oui` pour lancer l'ex√©cution de ce plan, √©tape par √©tape.
    - Tapez `annuler` pour rejeter ce plan et recommencer.
    """

        # Afficher le Markdown dans le notebook
        display(Markdown(md))

        # Retourner un statut pour la logique principale
        return {
            "status": "plan_awaits_confirmation",
            "message": "Le plan a √©t√© pr√©sent√© √† l'utilisateur."
        }

    async def _prepare_and_visualize_current_step(self) -> Dict[str, Any]:
        """Pr√©pare et retourne le payload pour afficher la mol√©cule de l'√©tape actuelle."""
        plan = self.session.active_plan
        step_index = self.session.current_step_index

        # V√©rifier si on a fini le plan
        if step_index >= len(plan.calculation_steps):
            print("‚úÖ Toutes les √©tapes ont √©t√© construites. Assemblage du script final...")
            return await self._assemble_final_script_with_llm()

        step = plan.calculation_steps[step_index]
        if self.session.step_clarification_history is None:
            display(Markdown(f"### ‚û°Ô∏è √âtape {step.step_id}/{len(plan.calculation_steps)} : **{step.description}**"))
            # Le premier message est la demande initiale du plan
            self.session.step_clarification_history = [{"role": "user", "content": step.tool_args.system_description}]

        #display(Markdown(f"### ‚û°Ô∏è √âtape {step.step_id}/{len(plan.calculation_steps)} : **{step.description}**"))

        # G√©n√©rer la structure mol√©culaire et la sauvegarder dans la session
        proposed_molecule = await self._propose_molecule_with_llm(conversation_history=self.session.step_clarification_history)
        if not proposed_molecule:
            return {"status": "error",
                    "message": f"Impossible de g√©n√©rer la structure pour '{step.tool_args.system_description}'."}

        # On ajoute la proposition de l'agent √† l'historique pour le contexte futur
        self.session.step_clarification_history.append(
            {"role": "assistant", "content": proposed_molecule.model_dump_json()})

        await self._create_molecular_system(proposed_molecule)

        # Changer l'√©tat pour attendre la confirmation de cette mol√©cule
        self.session.stage = BigDFTStage.AWAIT_VISUALIZATION_CONFIRMATION

        # Retourner le payload pour l'affichage
        structured_response = await self._generate_bigdft_structured_response(proposed_molecule)
        return {
            "status": "system_proposed_structured",
            "structured_response": structured_response,
            "message": f"Veuillez v√©rifier la structure pour l'√©tape {step.step_id}."
        }

    async def report_step_result(self, step_id: int, result_value: float) -> Dict[str, Any]:  # Ajout du type de retour
        """Enregistre le r√©sultat d'une √©tape et retourne le payload pour la suivante."""
        print(f"‚úÖ R√©sultat pour l'√©tape {step_id} enregistr√© : {result_value}")
        self.session.step_results[step_id] = result_value
        self.session.current_step_index += 1

        # On retourne directement le payload de la prochaine √©tape
        return await self._prepare_and_visualize_current_step()

    async def _generate_bigdft_code(self) -> Optional[str]:
        """
        G√©n√®re le code PyBigDFT en utilisant l'AGENT RAG, en lui fournissant
        les donn√©es brutes du syst√®me (JSON) et en lui laissant la responsabilit√©
        d'√©crire le code de d√©finition de la g√©om√©trie.
        """
        # √âtape 1 : V√©rifier que les informations n√©cessaires existent dans la session
        if not self.session.system or not self.session.calculation_config:
            self.logger.error("Tentative de g√©n√©ration de code sans syst√®me ou configuration.")
            return None

        # √âtape 2 : Pr√©parer les donn√©es pour le prompt de l'agent
        system = self.session.system
        config = self.session.calculation_config

        # --- APPROCHE CORRIG√âE : Fournir la g√©om√©trie sous forme de donn√©es JSON ---
        # C'est propre, non ambigu et s√©pare les donn√©es de la logique.
        system_data = {
            "name": system.name,
            "charge": system.charge,
            "multiplicity": system.multiplicity,
            "atoms": system.atoms
        }
        geometry_json = json.dumps(system_data, indent=4)
        # --- FIN DE LA CORRECTION ---

        # Construire les instructions de calcul (cette partie ne change pas)
        param_instructions = []
        if config.optimize_geometry:
            param_instructions.append("- Une optimisation de la g√©om√©trie DOIT √™tre effectu√©e.")
        if config.spin_polarized:
            param_instructions.append(f"- Le calcul DOIT √™tre polaris√© en spin.")
        param_instructions.append(f"- La fonctionnelle DFT √† utiliser est '{config.functional}'.")
        param_text = "\n        ".join(param_instructions)

        # √âtape 3 : Construire le prompt final, maintenant bas√© sur les donn√©es
        agent_prompt = f"""
        Ta mission est d'agir en tant qu'expert programmeur PyBigDFT. Tu dois √©crire une fonction Python compl√®te, autonome et CORRECTE.

        **Donn√©es d'Entr√©e Obligatoires :**

        1.  **Donn√©es du Syst√®me (Format JSON) :**
            Voici les donn√©es du syst√®me mol√©culaire. Tu DOIS utiliser ces donn√©es pour √©crire le code Python qui d√©finit la g√©om√©trie.

            ```json
            {geometry_json}
            ```

        2.  **Instructions de Calcul :**
            Ton code doit appliquer les contraintes de calcul suivantes :
            {param_text}

        **Ton plan d'action OBLIGATOIRE :**

        1.  **√âCRIS LE CODE DE LA G√âOM√âTRIE :** En te basant sur les donn√©es JSON ci-dessus et sur les recherches s√©mantiques pour connaitre la syntaxe de la construction d'un system avec pybigdft.
        2.  **CHERCHE LA SYNTAXE DU CALCUL :** Utilise tes outils (`semantic_search`) pour trouver la syntaxe correcte afin d'appliquer les instructions de calcul (comment d√©finir la fonctionnelle, l'optimisation, etc.).
        3.  **ASSEMBLE LA FONCTION :** Combine le tout dans une seule fonction Python nomm√©e `run_bigdft_calculation()` comprenant √©galement les import.
        4.  **R√âPONSE FINALE STRUCTUR√âE :** Ta r√©ponse finale DOIT √™tre un appel √† `structured_final_answer` contenant exactement UN `CodeExample`.

        Commence ta mission.
        """

        print("ü§ñ L'agent RAG est consult√© pour √©crire le code √† partir des donn√©es brutes...")

        # √âtape 4 : Lancer l'agent RAG et traiter sa r√©ponse (cette partie ne change pas)
        try:
            agent_response = await self.rag.unified_agent.run(agent_prompt, use_memory=False)

            if agent_response.status == "success" and agent_response.structured_answer and agent_response.structured_answer.code_examples:
                generated_code = agent_response.structured_answer.code_examples[0].code
                print("‚úÖ L'agent RAG a g√©n√©r√© le code autonome √† partir des donn√©es.")

                sources_md = "##### Sources consult√©es par l'agent :\n"
                if agent_response.sources_consulted:
                    for source in agent_response.sources_consulted:
                        sources_md += f"- {source.get_citation()}\n"
                    display(Markdown(sources_md))

                return generated_code
            else:
                error_details = agent_response.error_details or "L'agent n'a pas retourn√© de code structur√©."
                self.logger.error(f"√âchec de la g√©n√©ration de code par l'agent RAG : {error_details}")
                display(Markdown(f"### ‚ùå Erreur de l'Agent RAG\n{error_details}"))
                return None

        except Exception as e:
            self.logger.error(f"Erreur critique lors de l'appel √† l'agent RAG pour la g√©n√©ration de code : {e}",
                              exc_info=True)
            return None

    async def _perform_final_analysis(self) -> Dict[str, Any]:  # Renomm√©e
        """Calcule le r√©sultat final et retourne un payload pour l'affichage."""
        plan = self.session.active_plan
        results = self.session.step_results

        # ... (la logique de v√©rification reste la m√™me)

        safe_context = {f"result_{step.step_id}": results[step.step_id] for step in plan.calculation_steps}

        try:
            formula = plan.final_analysis.formula
            final_value = eval(formula, {"__builtins__": {}}, safe_context)
            readable_formula = formula
            for step_id, value in safe_context.items():
                readable_formula = readable_formula.replace(step_id, f"({value:.4f})")

            # Le plan est termin√©, on le marque pour r√©initialisation future
            self.session.stage = BigDFTStage.COMPLETED

            # On retourne un payload avec toutes les infos pour l'affichage
            return {
                "status": "final_analysis_ready",  # Nouveau statut √† g√©rer
                "description": plan.final_analysis.description,
                "formula": formula,
                "readable_formula": readable_formula,
                "final_result": final_value
            }

        except Exception as e:
            return {"status": "error", "message": f"Erreur lors de l'√©valuation de la formule finale : {e}"}

    async def _generate_scientific_plan(self, user_message: str) -> Optional[ScientificPlan]:
        """Demande au LLM de d√©composer l'objectif de l'utilisateur en un plan ex√©cutable."""

        system_prompt = f"""
    Tu es un assistant expert en chimie computationnelle. Ton r√¥le est de prendre l'objectif scientifique de l'utilisateur et de le d√©composer en un plan d'action structur√©, √©tape par √©tape, en utilisant les outils disponibles.


    L'utilisateur demande : "{user_message}"
    """
        try:
            # On demande au LLM de remplir notre mod√®le Pydantic
            response = await self.rag.unified_agent.llm.generate_response(
                messages=[{"role": "system", "content": system_prompt}],
                pydantic_model=ScientificPlan
            )
            if response and isinstance(response, dict):
                return ScientificPlan.model_validate(response)
        except Exception as e:
            print(f"Erreur lors de la g√©n√©ration du plan : {e}")
            return None

    def _normalize_molecule_info(self, molecule_info) -> Dict[str, Any]:
        """Convertit un objet BigDFTMoleculeProposal en dictionnaire."""
        if hasattr(molecule_info, 'model_dump'):  # Objet Pydantic
            result = molecule_info.model_dump()
            result['atoms'] = [
                {"element": atom.element, "position": atom.position}
                for atom in molecule_info.atoms
            ]
            return result
        else:
            return molecule_info  # D√©j√† un dictionnaire

    async def _propose_molecule_with_llm(self, conversation_history: List[Dict[str, str]]) -> Optional[
        BigDFTMoleculeProposal]:
        """
        Utilise le LLM pour proposer une mol√©cule, en se basant sur un historique de conversation
        et en s'enrichissant du contexte RAG si n√©cessaire.
        """
        if not conversation_history:
            return None

        # --- 1. Logique RAG : on se base sur la derni√®re demande de l'utilisateur ---
        rag_context = ""
        last_user_message = ""
        # On trouve la derni√®re intervention de l'utilisateur pour la recherche RAG
        for message in reversed(conversation_history):
            if message["role"] == "user":
                last_user_message = message["content"]
                break

        if self.rag and last_user_message:
            try:
                retriever = self.rag.unified_agent.semantic_retriever
                if len(retriever.chunks) == 0:
                    print("    üîÑ Construction de l'index RAG (une seule fois)...")
                    notebook_count = retriever.build_index_from_existing_chunks(self.rag)
                    print(f"    ‚úÖ {notebook_count} notebook(s) index√©s.")

                if len(retriever.chunks) > 0:
                    print(f"    üîç Recherche RAG pour : '{last_user_message}'")
                    rag_results = retriever.query(f"structure de la mol√©cule {last_user_message}", k=2)
                    if rag_results:
                        rag_context = "\n".join([r["content"] for r in rag_results[:1]])
            except Exception as e:
                print(f"    ‚ö†Ô∏è Erreur RAG: {e}")

        # --- 2. Construction du Prompt Syst√®me ---
        # Ce prompt est maintenant un guide de comportement pour le LLM.
        system_prompt = f"""
    Tu es un expert en chimie computationnelle. Ta mission est de d√©terminer une structure mol√©culaire en te basant sur la conversation ci-dessous.

    R√àGLES FONDAMENTALES :
    1.  **PRIORIT√â √Ä L'UTILISATEUR** : Si l'utilisateur te corrige (par exemple en disant 'non, je veux juste C'), sa demande √©crase toute autre consid√©ration. Tu DOIS lui fournir ce qu'il demande, m√™me si cela te semble physiquement inhabituel (comme un atome de carbone isol√©).
    2.  **UTILISE LE CONTEXTE RAG** : Sers-toi du contexte RAG fourni comme base de connaissance pour ta premi√®re proposition si aucune correction n'est faite.
    3.  **SOIS PR√âCIS** : Tes structures doivent avoir des coordonn√©es en Angstr√∂m et des distances de liaison r√©alistes, sauf si l'utilisateur demande autre chose.
    4.  **EXPLIQUE** : Justifie bri√®vement ta proposition dans le champ 'explanation'.

    Contexte RAG disponible :
    {rag_context if rag_context else "Aucun."}
    """

        # --- 3. Appel au LLM avec l'historique complet ---
        try:
            if self.rag and hasattr(self.rag, 'unified_agent'):
                # On combine le prompt syst√®me avec l'historique de la conversation
                messages = [{"role": "system", "content": system_prompt}]
                messages.extend(conversation_history)

                # On utilise la r√©ponse structur√©e pour plus de fiabilit√©
                response = await self.rag.unified_agent.llm.generate_response(
                    messages=messages,
                    pydantic_model=BigDFTMoleculeProposal
                )

                if response and isinstance(response, dict):
                    molecule_proposal = BigDFTMoleculeProposal.model_validate(response)
                    print(f"    ‚úÖ Structure propos√©e: {molecule_proposal.name}")
                    print(f"    üìä Confiance: {molecule_proposal.confidence:.2f}")
                    print(f"    üìù {molecule_proposal.explanation}")
                    return molecule_proposal

        except Exception as e:
            print(f"    ‚ùå Erreur LLM structur√©: {e}")

        return None

    async def _create_and_display_system(self, molecule_info) -> Dict[str, Any]:
        """Cr√©e le syst√®me et g√©n√®re une r√©ponse structur√©e compl√®te."""

        # Normaliser molecule_info en dictionnaire pour la compatibilit√©
        if hasattr(molecule_info, 'model_dump'):  # C'est un objet Pydantic
            molecule_dict = molecule_info.model_dump()
            molecule_dict['atoms'] = [
                {"element": atom.element, "position": atom.position}
                for atom in molecule_info.atoms
            ]
        else:
            molecule_dict = molecule_info

        # Cr√©er le syst√®me avec le dictionnaire
        system_created = await self._create_molecular_system(molecule_dict)
        if not system_created:
            return {"status": "error", "message": "Erreur lors de la cr√©ation du syst√®me"}

        # G√©n√©rer une r√©ponse structur√©e (passer l'objet Pydantic original si disponible)
        structured_response = await self._generate_bigdft_structured_response(
            molecule_info if hasattr(molecule_info, 'model_dump') else molecule_dict
        )

        self.session.stage = BigDFTStage.STRUCTURE_CREATED

        return {
            "status": "system_proposed_structured",
            "structured_response": structured_response,
            "system_info": molecule_dict,  # Toujours passer le dict pour compatibilit√©
            "message": f"Structure propos√©e pour {molecule_dict['name']}"
        }

    async def _generate_bigdft_structured_response(self, molecule_info) -> BigDFTStructuredResponse:
        """G√©n√®re une r√©ponse structur√©e compl√®te avec code de visualisation."""

        # ‚úÖ CORRECTION : G√©rer √† la fois les objets Pydantic et les dictionnaires
        if hasattr(molecule_info, 'model_dump'):  # C'est un objet BigDFTMoleculeProposal
            molecule_proposal = molecule_info
            # Convertir en dict pour le code de visualisation
            molecule_dict = {
                "name": molecule_proposal.name,
                "charge": molecule_proposal.charge,
                "multiplicity": molecule_proposal.multiplicity,
                "confidence": molecule_proposal.confidence,
                "explanation": molecule_proposal.explanation,
                "atoms": [
                    {"element": atom.element, "position": atom.position}
                    for atom in molecule_proposal.atoms
                ]
            }
        else:  # C'est un dictionnaire
            molecule_dict = molecule_info
            # Convertir en BigDFTMoleculeProposal
            atoms_list = []
            for atom in molecule_dict.get("atoms", []):
                atoms_list.append(AtomDefinition(
                    element=atom["element"],
                    position=atom["position"]
                ))

            molecule_proposal = BigDFTMoleculeProposal(
                name=molecule_dict["name"],
                atoms=atoms_list,
                charge=molecule_dict.get("charge", 0),
                multiplicity=molecule_dict.get("multiplicity", 1),
                confidence=molecule_dict.get("confidence", 0.9),
                explanation=molecule_dict.get("explanation", f"Structure standard pour {molecule_dict['name']}"),
                geometry_type=molecule_dict.get("geometry_type", "unknown")
            )

        # G√©n√©ration du code de visualisation avec le dictionnaire
        visualization_code = self._generate_visualization_code_structured(molecule_dict)

        return BigDFTStructuredResponse(
            executive_summary=f"Structure mol√©culaire {molecule_proposal.name} propos√©e avec {len(molecule_proposal.atoms)} atomes.",
            molecule_proposal=molecule_proposal,
            visualization_code=visualization_code,
            next_instructions="Vous pouvez modifier le code de visualisation ci-dessous, puis confirmer avec 'ok' pour passer √† la configuration DFT.",
            stage_reached="structure_proposed"
        )

    def _generate_visualization_code_structured(self, molecule_dict: Dict[str, Any]) -> BigDFTVisualizationCode:
        """G√©n√®re le code de visualisation sous forme structur√©e."""

        # ‚úÖ CORRECTION : Utiliser molecule_dict (dictionnaire) au lieu d'objet Pydantic
        code_lines = [
            "# üß™ Visualisation mol√©culaire interactive - BigDFT Assistant",
            f"# Mol√©cule: {molecule_dict['name']}",
            "# Vous pouvez modifier les coordonn√©es ci-dessous",
            "",
            "import numpy as np",
            "",
            "# Structure mol√©culaire modifiable",
            "molecule_data = {",
            f'    "name": "{molecule_dict["name"]}",',
            f'    "charge": {molecule_dict.get("charge", 0)},',
            f'    "multiplicity": {molecule_dict.get("multiplicity", 1)},',
            '    "atoms": ['
        ]

        for atom in molecule_dict["atoms"]:
            pos = atom["position"]
            code_lines.append(
                f'        {{"element": "{atom["element"]}", "position": [{pos[0]:.6f}, {pos[1]:.6f}, {pos[2]:.6f}]}},')

        code_lines.extend([
            "    ]",
            "}",
            "",
            "# G√©n√©ration automatique du format XYZ",
            "def generate_xyz_from_molecule(mol_data):",
            '    lines = [str(len(mol_data["atoms"]))]',
            '    lines.append(f"{mol_data[\'name\']} - Structure modifiable")',
            '    for atom in mol_data["atoms"]:',
            '        pos = atom["position"]',
            '        lines.append(f"{atom[\'element\']:2s} {pos[0]:12.6f} {pos[1]:12.6f} {pos[2]:12.6f}")',
            '    return "\\n".join(lines)',
            "",
            "xyz_content = generate_xyz_from_molecule(molecule_data)",
            "",
            "# Visualisation 3D avec py3Dmol",
            "try:",
            "    import py3Dmol",
            "    view = py3Dmol.view(width=700, height=500)",
            "    view.addModel(xyz_content, 'xyz')",
            "    view.setStyle({'stick': {'radius': 0.15}, 'sphere': {'radius': 0.4}})",
            "    view.setBackgroundColor('#f0f0f0')",
            "    view.addLabel('Modifiez les coordonn√©es ci-dessus puis r√©-ex√©cutez', {'position': {'x': 10, 'y': 10, 'z': 0}, 'backgroundColor': 'black', 'fontColor': 'white'})",
            "    view.zoomTo()",
            "    view.show()",
            "    ",
            "except ImportError:",
            "    print('‚ö†Ô∏è py3Dmol non disponible. Installation: pip install py3Dmol')",
            "    print('üìä Structure XYZ:')",
            "    print(xyz_content)",
            "",
            "# Afficher les informations mol√©culaires",
            'print(f"üß™ Mol√©cule: {molecule_data[\'name\']}")',
            'print(f"‚öõÔ∏è Atomes: {len(molecule_data[\'atoms\'])}")',
            'print(f"‚ö° Charge: {molecule_data[\'charge\']}")',
            'print(f"üåÄ Multiplicit√©: {molecule_data[\'multiplicity\']}")',
            'print("\\n‚úÖ Structure pr√™te ! Dites \'ok\' pour configurer le calcul DFT.")'
        ])

        return BigDFTVisualizationCode(
            language="python",
            code="\n".join(code_lines),
            explanation=f"Code de visualisation 3D interactif pour {molecule_dict['name']} avec py3Dmol",
            modifiable=True,
            dependencies=["py3Dmol", "numpy"]
        )

    async def _prepare_bigdft_code_for_execution(self, structured_response: BigDFTStructuredResponse):
        """Pr√©pare la r√©ponse BigDFT pour l'ex√©cution via /execute."""

        if not structured_response.visualization_code:
            return

        # Cr√©er une r√©ponse structur√©e compatible avec /execute
        from OntoFlow.agent.Onto_wa_rag.jupyter_analysis.jupyter_agent import AgentStructuredAnswerArgs, CodeExample
        from OntoFlow.agent.Onto_wa_rag.jupyter_analysis.jupyter_agent import AgentResponse
        from datetime import datetime

        # Convertir le code BigDFT en CodeExample
        viz_code = structured_response.visualization_code

        agent_structured_response = AgentStructuredAnswerArgs(
            executive_summary=structured_response.executive_summary,
            code_examples=[
                CodeExample(
                    language=viz_code.language,
                    code=viz_code.code,
                    explanation=viz_code.explanation,
                    function_name="generate_xyz_from_molecule",
                    execution_ready=True,
                    is_complete_function=True,
                    required_modules=viz_code.dependencies
                )
            ],
            answer_type="hpc_function" if "BigDFT" in viz_code.code else "explanation"
        )

        # Cr√©er une r√©ponse d'agent simul√©e pour /execute
        fake_response = AgentResponse(
            answer=structured_response.executive_summary,
            status="success",
            query="BigDFT molecule visualization",
            session_id="bigdft_viz_session",
            timestamp=datetime.now(),
            execution_time_total_ms=1000.0,
            steps_taken=1,
            max_steps=1,
            structured_answer=agent_structured_response
        )

        return fake_response

    def _generate_editable_molecule_code(self, molecule_info: Dict[str, Any]) -> str:
        """G√©n√®re le code Python modifiable pour la mol√©cule."""

        lines = [
            "# üìù Structure mol√©culaire modifiable",
            f"# Mol√©cule: {molecule_info['name']}",
            "# Modifiez les coordonn√©es ci-dessous si n√©cessaire",
            "",
            "import py3Dmol",
            "",
            "# D√©finition des atomes (√©l√©ment, x, y, z en Angstr√∂m)",
            "atoms = ["
        ]

        for atom in molecule_info["atoms"]:
            element = atom["element"]
            pos = atom["position"]
            lines.append(f'    ("{element}", {pos[0]:.6f}, {pos[1]:.6f}, {pos[2]:.6f}),')

        lines.extend([
            "]",
            "",
            "# G√©n√©ration du fichier XYZ",
            "xyz_content = f\"{len(atoms)}\\n\"",
            f"xyz_content += \"{molecule_info['name']} - Structure modifiable\\n\"",
            "for element, x, y, z in atoms:",
            "    xyz_content += f\"{element:2s} {x:12.6f} {y:12.6f} {z:12.6f}\\n\"",
            "",
            "# Visualisation 3D",
            "try:",
            "    view = py3Dmol.view(width=600, height=400)",
            "    view.addModel(xyz_content, 'xyz')",
            "    view.setStyle({'stick': {'radius': 0.2}, 'sphere': {'radius': 0.5}})",
            "    view.setBackgroundColor('white')",
            "    view.zoomTo()",
            "    view.show()",
            "except ImportError:",
            "    print('‚ö†Ô∏è py3Dmol non install√©. Installez avec: pip install py3Dmol')",
            "    print('Structure XYZ:')",
            "    print(xyz_content)"
        ])

        return "\n".join(lines)

    async def _create_molecular_system(self, molecule_info) -> bool:
        """Cr√©e un syst√®me mol√©culaire Python natif (sans BigDFT)."""
        try:
            # ‚úÖ CORRECTION : G√©rer √† la fois dict et objet Pydantic
            if hasattr(molecule_info, 'model_dump'):  # Objet Pydantic
                name = molecule_info.name
                atoms = [{"element": atom.element, "position": atom.position} for atom in molecule_info.atoms]
                charge = molecule_info.charge
                multiplicity = molecule_info.multiplicity
            else:  # Dictionnaire
                name = molecule_info["name"]
                atoms = molecule_info["atoms"]
                charge = molecule_info.get("charge", 0)
                multiplicity = molecule_info.get("multiplicity", 1)

            self.session.system = MolecularSystem(
                name=name,
                atoms=atoms,
                charge=charge,
                multiplicity=multiplicity
            )
            return True

        except Exception as e:
            self.logger.error(f"Erreur cr√©ation syst√®me: {e}")
            return False

    def _system_to_xyz(self) -> str:
        """Convertit le syst√®me en format XYZ."""
        if not self.session.system:
            return ""

        lines = []
        atoms = self.session.system.atoms

        # Format XYZ standard
        lines.append(str(len(atoms)))
        lines.append(f"Generated by BigDFT Assistant - {self.session.system.name}")

        for atom in atoms:
            element = atom["element"]
            pos = atom["position"]
            lines.append(f"{element:2s} {pos[0]:12.6f} {pos[1]:12.6f} {pos[2]:12.6f}")

        return "\n".join(lines)

    async def _generate_3d_view(self) -> Optional[Dict[str, Any]]:
        """G√©n√®re une visualisation 3D du syst√®me."""
        if not self.session.system:
            return None

        try:
            # Convertir le syst√®me en format XYZ
            xyz_data = self._system_to_xyz()

            if HAS_PY3DMOL:
                return {
                    "type": "py3dmol",
                    "data": xyz_data,
                    "config": {
                        "style": "ball_stick",
                        "width": 600,
                        "height": 400
                    }
                }
            elif HAS_NGLVIEW:
                return {
                    "type": "nglview",
                    "data": xyz_data
                }
            else:
                return {
                    "type": "text",
                    "data": xyz_data,
                    "message": "Visualisation 3D non disponible. Installez py3Dmol ou nglview."
                }

        except Exception as e:
            self.logger.error(f"Erreur visualisation: {e}")
            return None

    async def _get_system_suggestions(self, user_input: str) -> List[str]:
        """G√©n√®re des suggestions pour d√©finir le syst√®me."""
        return [
            "Mol√©cule H2O (eau)",
            "Mol√©cule N2 (diazote)",
            "Mol√©cule CO2 (dioxyde de carbone)",
            "Mol√©cule CH4 (m√©thane)",
            "D√©finir manuellement les atomes"
        ]

    def _check_rag_status(self) -> Dict[str, Any]:
        """V√©rifie et retourne l'√©tat du syst√®me RAG."""
        if not self.rag:
            return {"available": False, "reason": "RAG system not initialized"}

        if not hasattr(self.rag, 'unified_agent'):
            return {"available": False, "reason": "Unified agent not available"}

        retriever = self.rag.unified_agent.semantic_retriever
        chunks_count = len(retriever.chunks) if hasattr(retriever, 'chunks') else 0

        return {
            "available": True,
            "chunks_count": chunks_count,
            "indexed_files": len(getattr(retriever, 'indexed_files', {})),
            "needs_indexing": chunks_count == 0
        }

    def get_session_state(self) -> Dict[str, Any]:
        """Retourne l'√©tat actuel de la session."""
        return {
            "stage": self.session.stage.value,
            "has_system": self.session.system is not None,
            "has_calculator": self.session.calculator is not None,
            "conversation_length": len(self.session.conversation)
        }